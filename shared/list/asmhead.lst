     1                                  ;haribote-os;
     2                                  
     3                                  BOTPAK    EQU 0x00280000              ; bootpackのロード先
     4                                  DSKCAC    EQU 0x00100000              ; ディスクキャッシュの場所
     5                                  DSKCAC0   EQU 0x00008000              ; ディスクキャッシュの場所（リアルモード）
     6                                  
     7                                  ;BOOT_INFO
     8                                  CYLS  EQU   0x0ff0      ; ブートセクタが設定
     9                                  LEDS  EQU   0x0ff1
    10                                  VMODE EQU   0x0ff2      ; 色数に関する情報。何ビットカラーか？
    11                                  SCRNX EQU   0x0ff4      ; 解像度：X
    12                                  SCRNY EQU   0x0ff6      ; 解像度：Y
    13                                  VRAM  EQU   0x0ff8      ; グラフィックバッファの開始番地
    14                                  
    15                                    ORG     0xc200    ; プログラム開始番地
    16                                  
    17                                  ; 画面モード設定
    18 00000000 B013                      MOV     AL,0x13   ; VGAグラフィックス 320x200x8bit color
    19                                  
    20 00000002 B400                      MOV     AH,0x00
    21 00000004 CD10                      INT     0x10
    22 00000006 C606F20F08                MOV     BYTE [VMODE],8    ; 画面モードをメモ
    23 0000000B C706F40F4001              MOV     WORD [SCRNX],320
    24 00000011 C706F60FC800              MOV     WORD [SCRNY],200
    25 00000017 66C706F80F00000A00        MOV     DWORD [VRAM], 0x000a0000
    26                                  
    27                                  ; キーボードのLED状態をBIOSから取得
    28 00000020 B402                      MOV     AH,0x02
    29 00000022 CD16                      INT     0x16
    30 00000024 A2F10F                    MOV     [LEDS],AL
    31                                  
    32                                  ; PICが一切の割り込みを受け付けないようにする
    33                                  ;       AT互換機の仕様では、PICの初期化をするなら、
    34                                  ;       こいつをCLI前にやっておかないと、たまにハングアップする
    35                                  ;       PICの初期化はあとでやる
    36                                  
    37 00000027 B0FF                      MOV     AL,0xff
    38 00000029 E621                      OUT     0x21,AL
    39 0000002B 90                        NOP             ; OUT命令を連続させるとうまくいかない機種があるらしいので
    40 0000002C E6A1                      OUT     0xa1,AL
    41                                  
    42 0000002E FA                        CLI             ; さらにCPUレベルでも割り込み禁止
    43                                  
    44                                  ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
    45 0000002F E8B500                    CALL    waitkbdout
    46 00000032 B0D1                      MOV     AL,0xd1
    47 00000034 E664                      OUT     0x64,AL
    48 00000036 E8AE00                    CALL    waitkbdout
    49 00000039 B0DF                      MOV     AL,0xdf                 ; enable A20
    50 0000003B E660                      OUT     0x60,AL
    51 0000003D E8A700                    CALL    waitkbdout
    52                                  
    53                                  ; プロテクトモード移行
    54                                  ;[INSTRSET "i486p"]           ; 486の命令まで使いたいという記述
    55                                  
    56 00000040 0F0116[2A01]              LGDT    [GDTR0]                 ; 暫定GDTを設定
    57 00000045 0F20C0                    MOV     EAX,CR0
    58 00000048 6625FFFFFF7F              AND     EAX,0x7fffffff  ; bit31を0にする（ページング禁止のため）
    59 0000004E 6683C801                  OR      EAX,0x00000001  ; bit0を1にする（プロテクトモード移行のため）
    60                                  
    61 00000052 0F22C0                    MOV     CR0,EAX
    62 00000055 EB00                      JMP     pipelineflush
    63                                  pipelineflush:
    64 00000057 B80800                    MOV     AX,1*8                  ;  読み書き可能セグメント32bit
    65 0000005A 8ED8                      MOV     DS,AX
    66 0000005C 8EC0                      MOV     ES,AX
    67 0000005E 8EE0                      MOV     FS,AX
    68 00000060 8EE8                      MOV     GS,AX
    69 00000062 8ED0                      MOV     SS,AX
    70                                  
    71                                  ; bootpackの転送
    72 00000064 66BE[30010000]            MOV     ESI,bootpack    ; 転送元
    73 0000006A 66BF00002800              MOV     EDI,BOTPAK              ; 転送先
    74 00000070 66B900000200              MOV     ECX,512*1024/4
    75 00000076 E87500                    CALL    memcpy
    76                                  
    77                                  ; ついでにディスクデータも本来の位置へ転送
    78                                  ; まずはブートセクタから
    79 00000079 66BE007C0000              MOV     ESI,0x7c00              ; 転送元
    80 0000007F 66BF00001000              MOV     EDI,DSKCAC              ; 転送先
    81 00000085 66B980000000              MOV     ECX,512/4
    82 0000008B E86000                    CALL    memcpy
    83                                  
    84                                  ; 残り全部
    85 0000008E 66BE00820000              MOV     ESI,DSKCAC0+512 ; 転送元
    86 00000094 66BF00021000              MOV     EDI,DSKCAC+512  ; 転送先
    87 0000009A 66B900000000              MOV     ECX,0
    88 000000A0 8A0EF00F                  MOV     CL,BYTE [CYLS]
    89 000000A4 6669C900120000            IMUL    ECX,512*18*2/4  ; シリンダ数からバイト数/4に変換
    90 000000AB 6681E980000000            SUB     ECX,512/4       ; IPLの分だけ差し引く
    91 000000B2 E83900                    CALL    memcpy
    92                                  
    93                                  ; asmheadでしなければいけないことは全部し終わったので、
    94                                  ;       あとはbootpackに任せる
    95                                  
    96                                  ; bootpackの起動
    97 000000B5 66BB00002800              MOV     EBX,BOTPAK
    98 000000BB 66678B4B10                MOV     ECX,[EBX+16]
    99 000000C0 6683C103                  ADD     ECX,3                   ; ECX += 3;
   100 000000C4 66C1E902                  SHR     ECX,2                   ; ECX /= 4;
   101 000000C8 7410                      JZ      skip                    ; 転送するべきものがない
   102 000000CA 66678B7314                MOV     ESI,[EBX+20]    ; 転送元
   103 000000CF 6601DE                    ADD     ESI,EBX
   104 000000D2 66678B7B0C                MOV     EDI,[EBX+12]    ; 転送先
   105 000000D7 E81400                    CALL    memcpy
   106                                  skip:
   107 000000DA 66678B630C                MOV     ESP,[EBX+12]    ; スタック初期値
   108 000000DF 66EA1B0000001000          JMP     DWORD 2*8:0x0000001b
   109                                  
   110                                  waitkbdout:
   111 000000E7 E464                      IN      AL,0x64
   112 000000E9 2402                      AND     AL,0x02
   113 000000EB 75FA                      JNZ     waitkbdout        ; ANDの結果が0でなければwaitkbdoutへ
   114                                  
   115 000000ED C3                        RET
   116                                  
   117                                  memcpy:
   118 000000EE 66678B06                  MOV     EAX,[ESI]
   119 000000F2 6683C604                  ADD     ESI,4
   120 000000F6 66678907                  MOV     [EDI],EAX
   121 000000FA 6683C704                  ADD     EDI,4
   122 000000FE 6683E901                  SUB     ECX,1
   123 00000102 75EA                      JNZ     memcpy                  ; 引き算した結果が0でなければmemcpyへ
   124 00000104 C3                        RET
   125                                  
   126                                  ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   127 00000105 00<rept>                  ALIGNB  16, DB 0
   128                                  GDT0:
   129 00000110 00<rept>                  TIMES    8 DB 0                         ; ヌルセレクタ
   130 00000118 FFFF00000092CF00          DW      0xffff,0x0000,0x9200,0x00cf     ; 読み書き可能セグメント32bit
   131 00000120 FFFF0000289A4700          DW      0xffff,0x0000,0x9a28,0x0047     ; 実行可能セグメント32bit（bootpack用）
   132                                  
   133 00000128 0000                      DW      0
   134                                  GDTR0:
   135 0000012A 1700                      DW      8*3-1
   136 0000012C [10010000]                DD      GDT0
   137                                  
   138                                    ALIGNB  16, DB 0
   139                                  bootpack:
